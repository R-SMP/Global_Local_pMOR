function [ type, default ] = checkPropertyName( name )
%CHECKPROPERTYNAME Checks, if a variable name is valid
%   All variables which should be used in the program have to be defined
%   here.

availableProperties = ["ELEMENTAL_STIFFNESS", ...
    "ELEMENTAL_DAMPING", ...
    "ELEMENTAL_MASS", ...
    "IY", ...
    "IZ", ...
    "IT", ...
    "YOUNGS_MODULUS", ...
    "POISSON_RATIO", ...
    "CROSS_SECTION", ...
    "THICKNESS", ...
    "NUMBER_GAUSS_POINT", ... 
    "SHEAR_CORRECTION_FACTOR",...
    "DENSITY", ...
    "STEP", ...
    "TIME", ...
    "RAYLEIGH_ALPHA", ...
    "RAYLEIGH_BETA", ...
    "YOUNGS_MODULUS_HS", ...
    "POISSON_RATIO_HS", ...
    "DENSITY_HS", ...
    "ELEMENTAL_DAMPING_HS", ...
    "SAMPLE_NUMBER", ...
    "SAMPLE_RATE", ...
    "SPEED_OF_SOUND",...
    "DENSITY_FLUID",...
    "DENSITY_SOLID",...
    "LAMBDA_SOLID", ...
    "MUE_SOLID", ...
    "DAMPING_SOLID", ...
    "VISCOSITY_FLUID", ...
    "STANDARD_PRESSURE_FLUID", ...
    "HEAT_CAPACITY_FLUID", ...
    "PRANDTL_NUMBER_FLUID", ...
    "POROSITY", ...
    "TORTUOSITY", ...
    "FLOW_RESISTIVITY", ...
    "VISCOUS_LENGHT", ...
    "THERMAL_LENGTH", ...
    "FREQUENCY",...
    "VELOCITY",...
    "NORMAL_DISPLACEMENT",...
    "ADMITTANCE",...
    "IS_COUPLING_NODE",...
    "DIRECTION",...
    "SURFACE_DENSITY"];

available3dProperties = ["VOLUME_ACCELERATION", ...
    "POINT_LOAD", ...
    "PML_DIRECTION",...
    "PML_COORDINATE"];

availableMatrixProperties = ["STRESS_TENSOR"];

availableFlags = ["FULL_INTEGRATION", ...
    "USE_CONSISTENT_MASS_MATRIX", ...
    "USE_PLANE_STRAIN", ...
    "IS_PML" ...
    "PML_PREPROCESS"];

availableScalarDofNames = ["PRESSURE", ...
    "ACOUSTIC_PRESSURE"];

availableVectorDofNames = ["DISPLACEMENT", ...
    "DISPLACEMENT_FLUID", ...
    "ROTATION", ...
    "PML_DISTANCE",];

if any(ismember(name, availableProperties))
    type = 'variable1d';
    default = nan;
elseif any(ismember(name, available3dProperties))
    type = 'variable3d';
    default = nan(1,3);
elseif any(ismember(name, availableMatrixProperties))
    type = 'matrix';
    default = nan(3);
elseif any(ismember(name, availableFlags))
    type = 'flag';
    default = false;
elseif any(ismember(name, availableScalarDofNames))
    type = 'dofscalar';
    default = nan;
elseif any(ismember(name, availableVectorDofNames))
    type = 'dofvec';
    default = nan(1,3);
else
    msg = ['CheckPropertyName: A property with name \"', ...
        name, '\" is not defined'];
    e = MException('MATLAB:bm_mfem:undefinedPropertyName',msg);
    throw(e);
end

end

